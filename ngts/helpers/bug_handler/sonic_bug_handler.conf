{
	"debug_level": 1,
	"comparison_trace_depth": 5,
	"tools": {
		"asan": {
			"name": "ASAN",
			"bug_manager_id_old": "svc-nbu-sw-da",
			"bug_manager_id": "svc-addr-sanitizer",
			"parser": "asan",
			"update_note_template": ["<p>This issue has happen again:<br>{asan_title}</p>",
				"<p>During session ID: {session_id}<br>On setup: {setup_name}<br>Version is: {detected_in_version}</p>",
				"<p>Sanitizer detected leaks during test: {test_name}</p>",
				"<p><ins><strong>Observed behavior</strong></ins><br><pre>{stack_trace_full}</pre></p>"
			],
			"bug_template": {
				"title": "[Functional][ASAN][Memory Leak] | {asan_title}",
				"description": [
					"<p><ins><strong>Issue description</strong></ins></p>",
					"<p> During session ID: {session_id} on setup: {setup_name} sanitizer detected leaks during test: {test_name} </p>",
					"<ul>",
					"\t<li><strong>The test case is automated</strong></li>",
					"\t<li><strong>Is this a new test?</strong></li>",
					"\t<li><strong>How long it takes to reproduce the issue?</strong></li>",
					"\t<li><strong>How often the issue is reproduced and what probability?</strong></li>",
					"\t<li><strong>Is this a degradation?</strong></li>",
					"\t<li><strong>Is this a new flow or an existing flow that was changed recently</strong></li>",
					"\t<li><strong>Root cause (if already detected):</strong></li>",
					"\t<li><strong>Test log(path/url):</strong></li>",
					"</ul>",
					"<p><ins><strong>Setup description</strong></ins></p>",
					"<ul>",
					"\t<li><strong>Testbed name:</strong> <p>{setup_name}</p> </li>",
					"\t<li><strong>Testbed topology:</strong> <p>ptf-any</p> </li>",
					"\t<li><strong>Topology diagram (optional):</strong> <p>canonical</p> </li>",
					"</ul>",
					"<p><ins><strong>Steps to reproduce</strong></ins></p>",
					"<p>Note:</p>",
					"<ul>",
					"\t<li>Describe in details what steps should be performed in order to reproduce the problem.</li>",
					"\t<li>When moving issues to lower layers, then steps to reproduce should be described using the relevant terms:</li>",
					"\t<li>When moving issues from NOS to the SDK, API Calls trace should be provided</li>",
					"</ul>",
					"<p><ins><strong>Observed behavior</strong></ins></p>",
					"<pre>{stack_trace_full}</pre>",
					"<p><strong><ins>Expected behavior</ins></strong></p>",
					"<p> no sanitizer leaks during {test_name}</p>",
					"<p>&nbsp;</p>",
					"<p><ins><strong>Attachments</strong></ins></p>",
					"<p>Full sanitizer dump is available in attachments</p>"
				]
			}
		},
		"log_analyzer": {
			"name": "Log Analyzer",
			"bug_manager_id": "svc-log-analyzer",
			"parser": "log_analyzer",
			"update_note_template": ["<p>This issue has happen again:<br>{log_analyzer_title}</p>",
				"<p>During session ID: {session_id}<br>On setup: {setup_name}<br>Version is: {detected_in_version}</p>",
				"<p>Log Analyzer detected log errors during test: {test_name}</p>",
				"<p><ins><strong>Observed behavior</strong></ins><br><pre>{description}</pre></p>"
			],
			"bug_template": {
				"title": "[log_analyzer]| {log_analyzer_title}",
				"description": [
					"<p><ins><strong>Issue description</strong></ins></p>",
					"<p> During session ID: {session_id} on setup: {setup_name} Log Analyzer detected log errors during test: {test_name} </p>",
					"<ul>",
					"\t<li><strong>The test case is automated</strong></li>",
					"\t<li><strong>Test log(path/url):</strong></li>",
					"</ul>",
					"<p><ins><strong>Setup description</strong></ins></p>",
					"<ul>",
					"\t<li><strong>Testbed name:</strong> <p>{setup_name}</p> </li>",
					"</ul>",
					"<p><ins><strong>Observed behavior</strong></ins></p>",
					"<pre>{description}</pre>",
					"<p><strong><ins>Expected behavior</ins></strong></p>",
					"<p> no errors in the log during {test_name}</p>",
					"<p>&nbsp;</p>",
					"<p><ins><strong>Attachments</strong></ins></p>",
					"<p>Full dump is available in attachments</p>"
				]
			}
		},
		"debug_kernel": {
			"name": "Debug Kernel"
		},
		"black_duck": {
			"name": "BlackDuck"
		},
		"idle_fatal_checker": {
			"name": "Idle/Fatal Checker"
		}
	},
	"__projects_structure__": "project: {plugins: { TOOL: PLUGIN_NAME }, bug_manager_id: NAME}",
	"projects": {
		"NVOS - Design": {
			"plugins": {
				"asan": "stack_vector",
				"log_analyzer": "log_analyzer",
				"valgrind": "valgrind"
			},
			"bug_manager_id": "mlnxos-2-0-design"
		},
		"SONiC-Design": {
			"plugins": {
				"asan": "stack_vector",
				"log_analyzer": "log_analyzer",
				"valgrind": "valgrind"
			},
			"bug_manager_id": "sonic-design"
		},
		"mlnxOS-Eth": {
			"plugins": {
				"asan": "stack_vector",
				"log_analyzer": "log_analyzer",
				"valgrind": "valgrind"
			},
			"bug_manager_id": "sxeth"
		}
	},
	"flood_prevent_counter": 8,
	"bugs_management": "redmine"
}